import"./web-ifc-api-CuDRTh9k.js";import{X as M,y as S,A as C,F as x,x as B,C as E,d as k}from"./index-CY5L0lxg.js";import{C as v,W as A,S as D,O as F,G as I,F as L,c as P}from"./index-MG2l5tzA.js";import{T as W}from"./index-C8nqhRYO.js";import{w as T}from"./index-DClbg07k.js";import{S as U}from"./stats.min-GTpOrGrX.js";import"./_commonjsHelpers-Cpj98o6Y.js";W.init();T.init();const y=document.getElementById("container"),e=new v,j=e.get(A),t=j.create();t.scene=new D(e);t.renderer=new M(e,y);t.camera=new F(e);e.init();t.scene.setup();t.camera.controls.setLookAt(5,5,5,0,0,0);y.appendChild(t.renderer.three2D.domElement);const G=e.get(I);G.create(t);t.scene.three.background=null;const b=e.get(L),H=await fetch("https://thatopen.github.io/engine_components/resources/road.frag"),N=await H.arrayBuffer(),O=new Uint8Array(N),d=b.load(O);t.scene.three.add(d);const X=await fetch("https://thatopen.github.io/engine_components/resources/road.json");d.setLocalProperties(await X.json());const p=document.getElementById("scene-2d-left");p.components=e;if(!p.world)throw new Error("World not found!");const c=e.get(S);c.world=p.world;await c.draw(d);const l=e.get(C);l.world=t;l.draw(d);const g=document.getElementById("scene-2d-right");g.components=e;if(!g.world)throw new Error("World not found!");const f=e.get(x);f.world=g.world;f.world3D=t;c.onMarkerChange.add(({alignment:o,percentage:n,type:r,curve:s})=>{if(l.setMarker(o,n,r),r==="select"){const i=s.alignment.absolute[s.index].mesh,m=o.getPointAt(n,"absolute");f.set(i,m)}});c.onHighlight.add(({mesh:o})=>{l.highlighter.select(o);const n=o.curve.index,r=o.curve.alignment.absolute[n];r.mesh.geometry.computeBoundingSphere();const s=r.mesh.geometry.boundingSphere;s&&t.camera.controls.fitToSphere(s,!0)});c.onMarkerHidden.add(({type:o})=>{l.hideMarker(o)});const h=e.get(P);h.byEntity(d);const _=h.list,w=e.get(B),u=w.styles.list;for(const o in _.entities){const n=h.find({entities:[o]}),r=new E(Math.random(),Math.random(),Math.random()),s=new k({color:r});w.styles.create(o,new Set,g.world,s);for(const i in n){const m=b.list.get(i);m&&(u[o].fragments[i]=new Set(n[i]),u[o].meshes.add(m.mesh))}}w.update(!0);const a=new U;a.showPanel(2);document.body.append(a.dom);a.dom.style.left="0px";a.dom.style.zIndex="unset";t.renderer.onBeforeUpdate.add(()=>a.begin());t.renderer.onAfterUpdate.add(()=>a.end());
