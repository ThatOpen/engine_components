var Me=Object.defineProperty;var ke=(s,t,e)=>t in s?Me(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var l=(s,t,e)=>(ke(s,typeof t!="symbol"?t+"":t,e),e);import{d as ie,e as xe,l as se,V as p,C as _,G as Se,ag as De,y as Te,q as Be,T as $e,S as ze,a as Ee,L as re,m as Y}from"./index-BR15nMAM.js";import{R as J,E as V,i as Ae,b as ae,g as Ie,F as le,C as He,W as Fe,S as Ve,h as We,j as je,d as Ne}from"./graphic-vertex-picker-WQ6fDD2d.js";import{b as ce,a as Re,L as Ue}from"./LineSegments2-7VC28rX3.js";class Oe{constructor(t){l(this,"alignments",[]);l(this,"enabled",!0);l(this,"world",null);l(this,"_raycastable",[]);l(this,"_components");this._components=t}update(){this.dispose();for(const t of this.alignments)for(const e of t.children){const n=e;n.updateWorldMatrix(!0,!0);for(const a of n.children){const i=a;if(i.isLine2&&i.userData.points){const r=new ie,d=new xe;d.geometry.setIndex(i.geometry.index);const o=new Float32Array(i.userData.points),c=new se(o,3);r.setAttribute("position",c),d.geometry=r,d.userData.curve=i,d.applyMatrix4(i.matrixWorld),d.updateMatrixWorld(),this._raycastable.push(d)}}}}dispose(){for(const t of this._raycastable)t.geometry.dispose(),t.geometry=void 0;this._raycastable=[]}castRay(){if(!this.enabled||!this.world)return null;const n=this._components.get(J).get(this.world).castRayToObjects(this._raycastable);if(!n)return null;const a=n.object,i=a.geometry,r=n.index,d=i.attributes.position.array[r*3],o=i.attributes.position.array[r*3+1],c=i.attributes.position.array[r*3+2],h=i.attributes.position.array[r*3+3],u=i.attributes.position.array[r*3+4],m=i.attributes.position.array[r*3+5],C=new p(h-d,u-o,m-c).normalize();return{point:n.point,normal:C,curve:a.userData.curve,alignment:a.userData.curve.parent}}}class T{static alignmentPercentageToPoint(t,e){const n=new p,a=new p,i=this.alignmentLength(t),r=e*i;let d=0;if(t.updateWorldMatrix(!0,!0),e===1)for(let o=t.children.length-1;o>=0;o--){const c=t.children[o],h=c.userData.points;if(!h)continue;const u=new p(h[h.length-3],h[h.length-2],h[h.length-1]);return u.applyMatrix4(c.matrixWorld),{normal:new p,point:u,curve:c,alignment:t}}for(const o of t.children){const c=o.userData.points;if(c)for(let h=0;h<c.length-3;h+=3){const u=n.set(c[h],c[h+1],c[h+2]),m=a.set(c[h+3],c[h+4],c[h+5]),C=u.distanceTo(m);if(d+C>=r){const L=r-d,y=m.clone().sub(u).normalize(),k=y.clone().multiplyScalar(L);return u.add(k),u.applyMatrix4(o.matrixWorld),{normal:y,point:u,curve:o,alignment:t}}d+=C}}return null}static curvePercentageToPoint(t,e,n){const a=new p,i=new p,r=this.curveLength(e),d=n*r;let o=0;const c=e.userData.points;if(!c)throw new Error("No points found in curve");for(let h=0;h<c.length-3;h+=3){const u=a.set(c[h],c[h+1],c[h+2]),m=i.set(c[h+3],c[h+4],c[h+5]),C=u.distanceTo(m);if(o+C>=d){const L=d-o,y=m.clone().sub(u).normalize(),k=y.clone().multiplyScalar(L);return u.add(k),{normal:y,point:u,curve:e,alignment:t}}o+=C}return null}static alignmentLength(t){let e=0;if(t.userData.length!==void 0)return t.userData.length;for(const n of t.children)"isLine2"in n&&(e+=this.curveLength(n));return t.userData.length=e,e}static curveLength(t){let e=0;if(t.userData.length!==void 0)return t.userData.length;const n=new p,a=new p,i=t.userData.points;if(!i)throw new Error("No points found in curve");for(let r=0;r<i.length-2-3;r+=3){const d=n.set(i[r],i[r+1],i[r+2]),o=a.set(i[r+3],i[r+4],i[r+5]);e+=d.distanceTo(o)}return t.userData.length=e,e}static curvePointToAlignmentPercentage(t,e,n){const a=new p,i=new p,r=this.alignmentLength(t);let d=0;t.updateWorldMatrix(!0,!0);for(const o of t.children){const c=o.userData.points;if(c)for(let h=0;h<c.length-3;h+=3){const u=a.set(c[h],c[h+1],c[h+2]),m=i.set(c[h+3],c[h+4],c[h+5]);u.applyMatrix4(o.matrixWorld),m.applyMatrix4(o.matrixWorld);const C=u.distanceTo(m),L=u.distanceTo(e)<.001,y=m.distanceTo(e)<.001,k=this.isPointbetweenTwoOthers(u,m,e);if(o===n&&(L||y||k)){const f=u.distanceTo(e);return(d+f)/r}d+=C}}return null}static isPointbetweenTwoOthers(t,e,n){const a=new p;a.subVectors(e,t).normalize();const i=new p;i.subVectors(n,t).normalize();const r=new p;r.subVectors(n,e).normalize();const o=1-.0016;return a.dot(i)>o&&a.dot(r)<-o}}class Ge{constructor(t,e){l(this,"onDisposed",new V);l(this,"alignments",[]);l(this,"components");l(this,"onMarkerChange",new V);l(this,"enabled",!0);l(this,"highlightMaterial");l(this,"increments",20);l(this,"screenDistanceLimit",.1);l(this,"fadeInTime",500);l(this,"_mouseMarkers");l(this,"_highlighted",new Set);l(this,"_stationPoints",new Map);l(this,"_originalHighlightMaterialId","originalHighlightMaterial");l(this,"_world",null);l(this,"_raycaster");l(this,"_stationLabelColor",new _(16777215));l(this,"_stationLabelBackgroundColor",new _(8014801));l(this,"_stationPointerColor",new _(16777215));l(this,"_stationPointerBackgroundColor",new _(4803766));l(this,"_pointerDown",performance.now());l(this,"_pointerDownTime",150);l(this,"onPointerDown",()=>{this._pointerDown=performance.now()});l(this,"onPointerUp",()=>{if(performance.now()-this._pointerDown>this._pointerDownTime)return;const t=this.setMarkerToMouse("select");t&&this.onMarkerChange.trigger(t)});l(this,"onMouseMove",()=>{this.setMarkerToMouse("hover")});this.components=t,this.highlightMaterial=e,this._raycaster=new Oe(t),this._raycaster.alignments=this.alignments}get world(){return this._world}set world(t){var a,i,r,d;if(t===this._world||(this._world&&this.setupEvents(!1),this._world=t,(a=this._mouseMarkers)==null||a.hover.removeFromParent(),(i=this._mouseMarkers)==null||i.select.removeFromParent(),(r=this._mouseMarkers)==null||r.hover.element.remove(),(d=this._mouseMarkers)==null||d.select.element.remove(),!t))return;this._raycaster.world=t;const e=this.newCivilLabel(0,"stationPointer");t.scene.three.add(e),e.visible=!1,e.element.style.transition="";const n=this.newCivilLabel(0,"stationPointer");n.element.style.transition="",n.element.style.opacity="0.5",t.scene.three.add(n),n.visible=!1,this._mouseMarkers={select:e,hover:n},this.setupEvents(!0)}get stationLabelColor(){return this._stationLabelColor}set stationLabelColor(t){this._stationLabelColor=t;const e=`#${t.getHexString()}`;for(const[,{labels:n}]of this._stationPoints){const a=[...n.children];for(const i of a){const r=this.getLabel(i);r.style.color=e;const d=this.getPoint(i);d.style.backgroundColor=e}}}get stationLabelBackgroundColor(){return this._stationLabelBackgroundColor}set stationLabelBackgroundColor(t){this._stationLabelBackgroundColor=t;const e=`#${t.getHexString()}`;for(const[,{labels:n}]of this._stationPoints){const a=[...n.children];for(const i of a){const r=this.getLabel(i);r.style.backgroundColor=e;const d=this.getPoint(i);d.style.border=`2px solid ${e}`}}}get stationPointerColor(){return this._stationPointerColor}set stationPointerColor(t){this._stationPointerColor=t;const e=`#${t.getHexString()}`;if(this._mouseMarkers){const n=this._mouseMarkers.select,a=this.getLabel(n);a.style.color=e;const i=this.getPoint(n);i.style.backgroundColor=e}}get stationPointerBackgroundColor(){return this._stationPointerBackgroundColor}set stationPointerBackgroundColor(t){this._stationPointerBackgroundColor=t;const e=`#${t.getHexString()}`;if(this._mouseMarkers){const n=this._mouseMarkers.select,a=this.getLabel(n);a.style.backgroundColor=e;const i=this.getPoint(n);i.style.border=`2px solid ${e}`}}dispose(){var t,e,n,a;this.clearHighlight(),this.clearStations(),this.alignments=[],(t=this._mouseMarkers)==null||t.hover.removeFromParent(),(e=this._mouseMarkers)==null||e.select.removeFromParent(),(n=this._mouseMarkers)==null||n.hover.element.remove(),(a=this._mouseMarkers)==null||a.select.element.remove(),this._raycaster.dispose(),this.onDisposed.trigger(),this.onDisposed.reset()}updateAlignments(){this._raycaster.update()}setMarkerAtPoint(t,e){if(!this._mouseMarkers)throw new Error("No mouse markers found! Initialize the world before using this.");this.updateMarkerValue(t,e),this._mouseMarkers[e].visible=!0,this._mouseMarkers[e].position.copy(t.point)}highlight(t,e=!0){e&&this.clearHighlight(this._highlighted);for(const n of t.children)"isLineSegments2"in n&&"material"in n&&(n.userData[this._originalHighlightMaterialId]=n.material,n.material=this.highlightMaterial);this._highlighted.add(t)}clearHighlight(t=this._highlighted){for(const e of t)for(const n of e.children)"isLineSegments2"in n&&"material"in n&&(n.material=n.userData[this._originalHighlightMaterialId],delete n.userData[this._originalHighlightMaterialId]);this._highlighted.clear()}createStations(t){if(!this.world||this._stationPoints.has(t.uuid))return;const e=new Se;this.world.scene.three.add(e),this._stationPoints.set(t.uuid,{alignment:t,labels:e})}clearStations(t=this._stationPoints.keys()){for(const e of t){const n=this._stationPoints.get(e);n&&(this.clearLabels(n.labels),this._stationPoints.delete(e))}}updateStations(){if(!this.world)throw new Error("No world found!");if(!this.world.renderer)throw new Error("No renderer found!");const t=this.world.camera.three,e=this.world.renderer.three,n=new De,a=e.clippingPlanes,i=new p,r=new p;let d=!0;const o=new p;for(const[,{alignment:c,labels:h}]of this._stationPoints){this.clearLabels(h),c.updateWorldMatrix(!0,!0);const u=c.userData.initialStation;let m=u||0;const C=m%this.increments;let L=u+this.increments-C;for(const y of c.children){if(!("isLine2"in y))continue;const k=y;if(k.geometry.boundingBox||k.geometry.computeBoundingBox(),n.setFromProjectionMatrix(new Te().multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse)),!n.intersectsBox(k.geometry.boundingBox)){const w=T.curveLength(y);m+=w;const $=m%this.increments;L=m+this.increments-$;continue}const f=y.userData.points,me=f[0],ge=f[1],pe=f[2];if(o.set(me,ge,pe),o.applyMatrix4(y.matrixWorld),console.log(y.matrixWorld),!this.isLabelClipped(a,o)){if(d){d=!1,i.set(o.x,o.y,o.z),i.project(t),i.z=0;const w=this.newCivilLabel(m,"stationLabel");w.position.set(o.x,o.y,o.z),h.children.push(w)}else if(r.set(o.x,o.y,o.z),r.project(t),r.z=0,i.distanceTo(r)>this.screenDistanceLimit){const $=this.newCivilLabel(m,"stationLabel");$.position.set(o.x,o.y,o.z),h.children.push($),i.copy(r)}}const H=new p,G=new p;for(let w=0;w<f.length-3;w+=3){H.set(f[w],f[w+1],f[w+2]),G.set(f[w+3],f[w+4],f[w+5]);const $=H.distanceTo(G),ye=m+$,ve=G.clone().sub(H).normalize();for(;ye>L;){const _e=L-m,Q=ve.clone();Q.multiplyScalar(_e);const{x:Ce,y:Le,z:Pe}=H.clone().add(Q);if(o.set(Ce,Le,Pe),o.applyMatrix4(y.matrixWorld),!this.isLabelClipped(a,o)&&n.containsPoint(o)&&(r.set(o.x,o.y,o.z),r.project(t),r.z=0,i.distanceTo(r)>this.screenDistanceLimit)){const ee=this.newCivilLabel(L,"stationLabel");ee.position.set(o.x,o.y,o.z),h.children.push(ee),i.copy(r)}L+=this.increments}m+=$}const fe=f[f.length-3],be=f[f.length-2],we=f[f.length-1];if(o.set(fe,be,we),o.applyMatrix4(y.matrixWorld),this.isLabelClipped(a,o)||!n.containsPoint(o))continue;if(r.set(o.x,o.y,o.z),r.project(t),r.z=0,i.distanceTo(r)>this.screenDistanceLimit){const w=this.newCivilLabel(m,"stationLabel");w.position.set(o.x,o.y,o.z),h.children.push(w),i.copy(r)}}}}getCursorValue(){if(!this._mouseMarkers)throw new Error("No mouse markers found! Initialize the world before using this.");return this._mouseMarkers.select.element.children[0].children[0].innerText}setCursorValue(t,e){if(!this._mouseMarkers)throw new Error("No mouse markers found! Initialize the world before using this.");const a=this._mouseMarkers[e].element.children[0].children[0];a.innerText=t}isLabelClipped(t,e){for(const n of t)if(!(n.distanceToPoint(e)>0))return!0;return!1}clearLabels(t){const e=[...t.children];for(const n of e)n.element.style.opacity="0";setTimeout(()=>{for(const n of e)n.removeFromParent(),n.element.remove(),n.visible=!1},this.fadeInTime)}newCivilLabel(t,e){const n=document.createElement("div"),a=e==="stationLabel"?this.stationLabelColor:this.stationPointerColor,i=e==="stationLabel"?this.stationLabelBackgroundColor:this.stationPointerBackgroundColor,r=document.createElement("div");r.style.width="4px",r.style.height="4px",r.style.borderRadius="50%",r.style.backgroundColor=`#${a.getHexString()}`,r.style.border=`2px solid #${i.getHexString()}`,r.style.display="flex",r.style.justifyContent="center";const d=this.getFormattedStation(t),o=document.createElement("div");o.innerText=d,o.style.backgroundColor=`#${i.getHexString()}`,o.style.color=`#${a.getHexString()}`,o.style.padding="0.3rem",o.style.position="absolute",o.style.bottom="1rem",o.style.borderRadius="6px",o.style.boxShadow="rgba(0, 0, 0, 0.6) 0px 4px 6px",r.appendChild(o);const c=new Ae(n);return n.appendChild(r),e==="stationLabel"&&(n.style.transition=`opacity ${this.fadeInTime}ms ease-in-out`,n.style.opacity="0",setTimeout(()=>{n.style.opacity="1"})),c}setupEvents(t){if(!this.world)throw new Error("No world found!");if(this.world.isDisposing||!this.world.renderer)return;const e=this.world.renderer.three.domElement,a=this.components.get(J).get(this.world);a.three.params.Line||(a.three.params.Line={threshold:10}),e.removeEventListener("pointerdown",this.onPointerDown),e.removeEventListener("pointerup",this.onPointerUp),e.removeEventListener("pointermove",this.onMouseMove),t&&(e.addEventListener("pointerdown",this.onPointerDown),e.addEventListener("pointerup",this.onPointerUp),e.addEventListener("pointermove",this.onMouseMove))}setMarkerToMouse(t){if(!this.enabled||!this._mouseMarkers)return null;if(!this.world)throw new Error("No world found!");const e=this._raycaster.castRay();if(!e)return this._mouseMarkers[t].visible=!1,null;this._mouseMarkers[t].visible=!0;const n=e.point;return this._mouseMarkers[t].position.copy(n),this.updateMarkerValue(e,t),e}updateMarkerValue(t,e){if(!this._mouseMarkers)return;const{alignment:n,curve:a,point:i}=t,r=T.curvePointToAlignmentPercentage(n,i,a);if(r===null)throw new Error("Point is not on the curve");const o=r*T.alignmentLength(n)+n.userData.initialStation,c=this.getFormattedStation(o);this.setCursorValue(c,e)}getFormattedStation(t){const e=Math.floor(t/1e3),n=Math.round(t-e*1e3);return`${e}+${n}`}getLabel(t){return t.element.children[0].children[0]}getPoint(t){return t.element.children[0]}}const N=class N extends ae{constructor(e){super(e);l(this,"onDisposed",new V);l(this,"list",new Map);l(this,"enabled",!0);l(this,"highlightMaterial",new ce({color:8014801,linewidth:5,depthTest:!1}));l(this,"_increments",20);l(this,"_screenDistanceLimit",.1);l(this,"_fadeInTime",500);l(this,"_stationLabelColor",new _(16777215));l(this,"_stationLabelBackgroundColor",new _(8014801));l(this,"_stationPointerColor",new _(16777215));l(this,"_stationPointerBackgroundColor",new _(4803766));this.components.add(N.uuid,this)}get increments(){return this._increments}set increments(e){this._increments=e;for(const[,n]of this.list)n.increments=e}get screenDistanceLimit(){return this._screenDistanceLimit}set screenDistanceLimit(e){this._screenDistanceLimit=e;for(const[,n]of this.list)n.screenDistanceLimit=e}get fadeInTime(){return this._fadeInTime}set fadeInTime(e){this._fadeInTime=e;for(const[,n]of this.list)n.fadeInTime=e}get stationLabelColor(){return this._stationLabelColor}set stationLabelColor(e){this._stationLabelColor=e;for(const[,n]of this.list)n.stationLabelColor=e}get stationLabelBackgroundColor(){return this._stationLabelBackgroundColor}set stationLabelBackgroundColor(e){this._stationLabelBackgroundColor=e;for(const[,n]of this.list)n.stationLabelBackgroundColor=e}get stationPointerColor(){return this._stationPointerColor}set stationPointerColor(e){this._stationPointerColor=e;for(const[,n]of this.list)n.stationPointerColor=e}get stationPointerBackgroundColor(){return this._stationPointerBackgroundColor}set stationPointerBackgroundColor(e){this._stationPointerBackgroundColor=e;for(const[,n]of this.list)n.stationPointerBackgroundColor=e}create(e){const n=new Ge(this.components,this.highlightMaterial);return this.list.set(e,n),n}delete(e){const n=this.list.get(e);n&&(n.dispose(),this.list.delete(e))}dispose(){for(const[,e]of this.list)e.dispose();this.onDisposed.trigger(),this.onDisposed.reset()}updateAlignments(){for(const[,e]of this.list)e.updateAlignments()}};l(N,"uuid","0a59c09e-2b49-474a-9320-99f51f40f182");let X=N;const R=class R extends ae{constructor(e){super(e);l(this,"enabled",!0);l(this,"onDisposed",new V);l(this,"_world",null);l(this,"_flip",!1);l(this,"_plane");l(this,"_point",new p);l(this,"_edgeMeshes",[]);l(this,"_sectionVisible",!1);l(this,"_sectionOffset",.1);l(this,"edgeMaterial",new ce({color:0,linewidth:5,depthTest:!1}));this.components.add(R.uuid,this)}get plane(){if(!this._plane)throw new Error("Plane is not set. You must give a world.");return this._plane}set plane(e){this._plane=e}get sectionVisible(){return this._sectionVisible}set sectionVisible(e){this._sectionVisible=e;for(const n of this._edgeMeshes)n.visible=e}get world(){return this._world}set world(e){var i;if(this._world=e,(i=this._plane)==null||i.dispose(),!e)return;const n=this.components.get(Ie),a=n.createFromNormalAndCoplanarPoint(e,new p(1,0,0),new p);this.plane=n.list.get(a),this.plane.visible=!1,this.plane.enabled=!1}get flip(){return this._flip}set flip(e){var a;if(e===this._flip)return;this._flip=e;const n=(a=this.plane)==null?void 0:a.normal.clone().multiplyScalar(-1);for(const i of this._edgeMeshes)i.position.add(n.clone().multiplyScalar(this._sectionOffset));this.plane.setFromNormalAndCoplanarPoint(n,this._point),this.plane.update()}dispose(){var e;this.clearMeshes(),(e=this.plane)==null||e.dispose(),this.onDisposed.trigger(),this.onDisposed.reset()}async set(e,n){this.flip&&n.multiplyScalar(-1),this.plane.setFromNormalAndCoplanarPoint(n,e),this._point.copy(e)}async update(){this.clearMeshes();const e=this.components.get(le);this.plane.update();const n=[];for(const[,a]of e.list)n.push(this.generateModelSection(a));await Promise.all(n)}async generateModelSection(e){if(!this.world)return;const n=this.plane.three.clone();n.constant-=.01;const{buffer:a}=await e.getSection(n),i=new ie,r=new se(a,3,!1);i.setAttribute("position",r);const d=new Be(i),o=new Re;o.fromLineSegments(d);const c=new Ue(o,this.edgeMaterial);c.frustumCulled=!1,this.world.scene.three.add(c),this._edgeMeshes.push(c),c.renderOrder=3,d.geometry.dispose()}clearMeshes(){for(const e of this._edgeMeshes)e.removeFromParent(),e.geometry.dispose(),e.material=void 0;this._edgeMeshes=[]}};l(R,"uuid","96b2c87e-d90b-4639-8257-8f01136fe324");let Z=R;const he=document.getElementById("container"),M=new He,qe=M.get(Fe),g=qe.create();g.scene=new Ve(M);g.renderer=new We(M,he);g.camera=new je(M);M.init();$e.init();CUI.Manager.init();g.scene.setup();g.camera.controls.setLookAt(5,5,5,0,0,0);he.appendChild(g.renderer.three2D.domElement);const Ye=M.get(Ne);Ye.create(g);g.camera.three.far=1e4;g.camera.three.updateProjectionMatrix();g.scene.three.background=null;const U=M.get(le);U.init("/node_modules/@thatopen/fragments/dist/Worker/worker.mjs");const de="/resources/test/small-civil-q2.frag",Xe=await fetch(de),Ze=await Xe.arrayBuffer(),Ke=new Uint8Array(Ze),O=await U.core.load(Ke,{modelId:de,camera:g.camera.three});g.scene.three.add(O.object);await U.core.update(!0);g.camera.controls.addEventListener("control",()=>U.core.update());O.getClippingPlanesEvent=()=>Array.from(g.renderer.three.clippingPlanes)||[];const S=await O.getAlignments();g.scene.three.add(S);const v=M.get(X),b=v.create("absolute");b.world=g;for(const s of S.children)s.userData.initialStation=1925;b.alignments.push(S);b.updateAlignments();console.log(S);const W=new ze(void 0,20);b.onMarkerChange.add(({point:s})=>{W.center.copy(s),g.camera.controls.fitToSphere(W,!0)});const P=M.get(Z);P.world=g;document.getElementById("horizontal-menu");const B=v.create("horizontal"),E=await O.getHorizontalAlignments();for(const s of E.children)s.rotation.x=Math.PI/2,s.rotation.y=Math.PI/2;B.alignments.push(E);B.updateAlignments();for(const s of E.children)s.userData.initialStation=1925;b.onMarkerChange.add(s=>{console.log(s);const t=T.curvePointToAlignmentPercentage(s.alignment,s.point,s.curve);if(t===null)return;const e=T.alignmentPercentageToPoint(E.children[0],t);e!==null&&(B.setMarkerAtPoint(e,"select"),B.setCursorValue(b.getCursorValue(),"select"))});M.get(J);const A=new Ee;A.showPanel(2);document.body.append(A.dom);A.dom.style.left="0px";A.dom.style.zIndex="unset";g.renderer.onBeforeUpdate.add(()=>A.begin());g.renderer.onAfterUpdate.add(()=>A.end());let x=0,q=null,te=0,F=!0,z=!1;function K(){const s=S.children[x],t=E.children[x];F?(b.highlight(s),B.highlight(t)):(b.clearHighlight(),B.clearHighlight())}K();let ne=-1;function D(){ne!==x&&b.clearStations(),ne=x;const s=S.children[x];z?(b.createStations(s),b.updateStations()):b.clearStations()}function oe(s){const t=T.alignmentPercentageToPoint(S.children[x],s);t&&(W.center.copy(t.point),g.camera.controls.fitToSphere(W,!0),b.setMarkerAtPoint(t,"select"),P.set(t.point,t.normal),q&&clearTimeout(q),P.sectionVisible=!1,q=setTimeout(()=>{P.plane.enabled&&P.update()},1e3),z&&P.plane.enabled&&D());const e=T.alignmentPercentageToPoint(E.children[x],s);e&&(B.setMarkerAtPoint(e,"select"),B.setCursorValue(b.getCursorValue(),"select"))}const ue=1e3;let j=0;g.camera.controls.addEventListener("update",()=>{const s=Date.now();s-j>ue&&(D(),j=s)});g.camera.controls.addEventListener("update",()=>{const s=Date.now();s-j>ue&&(D(),j=s)});const I=re.create(()=>Y`
  <bim-panel active label="Civil 3D Navigator Tutorial" class="options-menu">

      <bim-panel-section label="Alignments">

         <bim-dropdown required label="Selected alignment"
             @change="${({target:s})=>{x=s.value[0],F&&K(),z&&D()}}">

          ${S.children.map(()=>Y`
              <bim-option ?checked=${te===0} label="${te++}"></bim-option>
            `)}
        </bim-dropdown>
        
        <bim-number-input
          slider step="1" label="Highlight width" value="${b.highlightMaterial.linewidth}" min="1" max="10"
          @change="${({target:s})=>{v.highlightMaterial.linewidth=s.value}}">
        </bim-number-input>

        <bim-color-input 
          label="Highlight Color" color="#${v.highlightMaterial.color.getHexString()}" 
          @input="${({target:s})=>{v.highlightMaterial.color=new _(s.color)}}">
        </bim-color-input>

        
        <bim-color-input 
          label="Station Label Color" color="#${v.stationLabelColor.getHexString()}" 
          @input="${({target:s})=>{v.stationLabelColor=new _(s.color)}}">
        </bim-color-input>

        
        <bim-color-input 
          label="Station Label Background Color" color="#${v.stationLabelBackgroundColor.getHexString()}" 
          @input="${({target:s})=>{v.stationLabelBackgroundColor=new _(s.color)}}">
        </bim-color-input>

        <bim-color-input 
          label="Station Pointer Color" color="#${v.stationPointerColor.getHexString()}" 
          @input="${({target:s})=>{v.stationPointerColor=new _(s.color)}}">
        </bim-color-input>

        <bim-color-input 
          label="Station Pointer Background Color" color="#${v.stationPointerBackgroundColor.getHexString()}" 
          @input="${({target:s})=>{v.stationPointerBackgroundColor=new _(s.color)}}">
        </bim-color-input>

        <bim-number-input
          slider step="0.05" label="Screen distance limit" value="${v.screenDistanceLimit}" min="0" max="1"
          @change="${({target:s})=>{v.screenDistanceLimit=s.value,b.updateStations()}}">
        </bim-number-input>

        <bim-checkbox
          label="Highlight selected" checked="${F}"
          @change="${({target:s})=>{F=s.checked,K()}}">
        </bim-checkbox>

        <bim-checkbox
          label="Show kps"
          @change="${({target:s})=>{z=s.checked,D()}}">
        </bim-checkbox>

        
        <bim-checkbox
          label="Clip"
          @change="${({target:s})=>{P.plane.enabled=s.checked,P.sectionVisible=s.checked,s.checked&&(P.update(),P.plane.update()),z&&D()}}">
        </bim-checkbox>

        
      <bim-checkbox
        label="Flip"
        @change="${({target:s})=>{P.flip=s.checked,z&&D()}}">
      </bim-checkbox>

      <bim-number-input
      slider step="10" label="Increments" value="${b.increments}" min="10" max="100"
      @change="${({target:s})=>{b.increments=s.value,D()}}">
    </bim-number-input>

    <bim-number-input
      slider step="0.01" label="Alignment navigation" value="0.5" min="0" max="1"
      @change="${({target:s})=>{oe(s.value)}}">
    </bim-number-input>

    <bim-number-input
      slider step="10" label="Move to KP" value="2000" min="1925" max="3000"
      @change="${({target:s})=>{const t=S.children[x],e=T.alignmentLength(t),a=(s.value-t.userData.initialStation)/e,i=Math.min(Math.max(a,0),1);oe(i)}}">
    </bim-number-input>

    </bim-panel-section>

    </bim-panel>
    `);I.style.zIndex="9999";document.body.append(I);const Je=re.create(()=>Y`
      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"
        @click="${()=>{I.classList.contains("options-menu-visible")?I.classList.remove("options-menu-visible"):I.classList.add("options-menu-visible")}}">
      </bim-button>
    `);document.body.append(Je);
