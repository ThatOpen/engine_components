var v=Object.defineProperty;var C=(t,s,e)=>s in t?v(t,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[s]=e;var i=(t,s,e)=>(C(t,typeof s!="symbol"?s+"":s,e),e);import{aO as O,aL as g,aM as F,a as D,R as I,m as p,b as W}from"./index-CZukAoYd.js";import{d as E,E as f,F as L,C as S,W as R,S as U,a as j,O as B}from"./index-C2IU-BFV.js";import{G as P}from"./index-C79suBt5.js";class ${constructor(){i(this,"wasm",{path:"",absolute:!1,logLevel:O.LOG_LEVEL_OFF});i(this,"webIfc",{COORDINATE_TO_ORIGIN:!0});i(this,"autoSetWasm",!0);i(this,"customLocateFileHandler",null)}}const m=class m extends E{constructor(e){super(e);i(this,"onDisposed",new f);i(this,"onIfcStartedLoading",new f);i(this,"onSetup",new f);i(this,"settings",new $);i(this,"webIfc",new g);i(this,"enabled",!0);this.components.add(m.uuid,this)}dispose(){this.webIfc=null,this.onDisposed.trigger(m.uuid),this.onDisposed.reset()}async setup(e){this.settings={...this.settings,...e},this.settings.autoSetWasm&&await this.autoSetWasm(),this.onSetup.trigger()}async load(e,a,o,n){const w=this.components.get(L);if(!w.initialized)throw new Error("You need to initialize fragments first.");this.settings.autoSetWasm&&await this.autoSetWasm(),w.core.settings.autoCoordinate=a;const u=new F;u.wasm.path=this.settings.wasm.path,u.wasm.absolute=this.settings.wasm.absolute,n!=null&&n.instanceCallback&&n.instanceCallback(u);const y=await u.process({...n==null?void 0:n.processData,bytes:e});return await w.core.load(y,{modelId:o,userData:n==null?void 0:n.userData})}async readIfcFile(e){const{path:a,absolute:o,logLevel:n}=this.settings.wasm;return this.webIfc.SetWasmPath(a,o),await this.webIfc.Init(this.settings.customLocateFileHandler||void 0),n&&this.webIfc.SetLogLevel(n),this.webIfc.OpenModel(e,this.settings.webIfc)}cleanUp(){try{this.webIfc.Dispose()}catch{console.log("Web-ifc wasn't disposed.")}this.webIfc=null,this.webIfc=new g}async autoSetWasm(){const e=await fetch(`https://unpkg.com/@thatopen/components@${S.release}/package.json`);if(!e.ok){console.warn("Couldn't get openbim-components package.json. Set wasm settings manually.");return}const a=await e.json();if(!("web-ifc"in a.peerDependencies))console.warn("Couldn't get web-ifc from peer dependencies in openbim-components. Set wasm settings manually.");else{const o=a.peerDependencies["web-ifc"];this.settings.wasm.path=`https://unpkg.com/web-ifc@${o}/`,this.settings.wasm.absolute=!0}}};i(m,"uuid","a659add7-1418-4771-a0d6-7d4d438e4624");let h=m;const l=new S,z=l.get(R),c=z.create();c.scene=new U(l);c.scene.setup();c.scene.three.background=null;const A=document.getElementById("container");c.renderer=new j(l,A);c.camera=new B(l);await c.camera.controls.setLookAt(78,20,-2.2,26,-4,25);l.init();l.get(P).create(c);const k=l.get(h);await k.setup({autoSetWasm:!1,wasm:{path:"https://unpkg.com/web-ifc@0.0.69/",absolute:!0}});const _="https://thatopen.github.io/engine_fragment/resources/worker.mjs",r=l.get(L);r.init(_);c.camera.controls.addEventListener("rest",()=>r.core.update(!0));r.list.onItemSet.add(({value:t})=>{t.useCamera(c.camera.three),c.scene.three.add(t.object),r.core.update(!0)});const x=async t=>{const e=await(await fetch(t)).arrayBuffer(),a=new Uint8Array(e);await k.load(a,!1,"example",{processData:{progressCallback:o=>console.log(o)}})},G=async()=>{const[t]=r.list.values();if(!t)return;const s=await t.getBuffer(!1),e=new File([s],"school_str.frag"),a=document.createElement("a");a.href=URL.createObjectURL(e),a.download=e.name,a.click(),URL.revokeObjectURL(a.href)};D.init();const[b,M]=I.create(t=>{let s;r.list.size>0&&(s=p`
      <bim-button label="Download Fragments" @click=${G}></bim-button>
    `);let e;return r.list.size===0&&(e=p`
      <bim-button label="Load IFC" @click=${async({target:o})=>{o.label="Conversion in progress...",o.loading=!0,await x("/resources/ifc/school_str.ifc"),o.loading=!1,o.label="Load IFC"}}></bim-button>
      <bim-label>Open the console to see the progress!</bim-label>
    `),p`
    <bim-panel active label="IfcLoader Tutorial" class="options-menu">
      <bim-panel-section label="Controls">
        ${e}
        ${s}
      </bim-panel-section>
    </bim-panel>
  `},{});document.body.append(b);r.list.onItemSet.add(()=>M());const N=I.create(()=>p`
      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"
        @click="${()=>{b.classList.contains("options-menu-visible")?b.classList.remove("options-menu-visible"):b.classList.add("options-menu-visible")}}">
      </bim-button>
    `);document.body.append(N);const d=new W;d.showPanel(2);document.body.append(d.dom);d.dom.style.left="0px";d.dom.style.zIndex="unset";c.renderer.onBeforeUpdate.add(()=>d.begin());c.renderer.onAfterUpdate.add(()=>d.end());
