import{b as y,L as I,C as L}from"./web-ifc-api-D8KQoGas.js";import{C as S,W as F,S as M,O as A,G as B,F as P,b as x,c as D}from"./index-B_l14CHw.js";import{X as U,c as G,M as O,b as T}from"./index-BCbMsEjB.js";import{T as W,L as u,m as f}from"./index-ByMLC5eT.js";import{S as v}from"./stats.min-GTpOrGrX.js";import"./_commonjsHelpers-Cpj98o6Y.js";const R=document.getElementById("container"),n=new S,$=n.get(F),e=$.create();e.scene=new M(n);e.renderer=new U(n,R);e.camera=new A(n);e.renderer.postproduction.enabled=!0;e.renderer.postproduction.customEffects.outlineEnabled=!0;n.init();e.camera.controls.setLookAt(12,6,8,0,0,-10);e.scene.setup();const j=n.get(B),g=j.create(e);g.three.position.y-=1;g.config.color.setHex(6710886);e.renderer.postproduction.customEffects.excludedMeshes.push(g.three);e.scene.three.background=null;const b=n.get(P),N=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),X=await N.arrayBuffer(),_=new Uint8Array(X),s=b.load(_);e.scene.three.add(s);const q=await fetch("https://thatopen.github.io/engine_components/resources/small.json"),z=await q.json();s.setLocalProperties(z);const c=new v;c.showPanel(2);document.body.append(c.dom);c.dom.style.left="0px";c.dom.style.zIndex="unset";e.renderer.onBeforeUpdate.add(()=>c.begin());e.renderer.onAfterUpdate.add(()=>c.end());const i=n.get(G);i.world=e;await i.generate(s);const d=n.get(O);d.setup({world:e});const H=n.get(x),l=H.create(e);for(const t of s.items)l.add(t.mesh);l.needsUpdate=!0;e.camera.controls.addEventListener("sleep",()=>{l.needsUpdate=!0});const a=n.get(D),r=n.get(T);a.byModel(s.uuid,s);a.byEntity(s);const k=a.find({models:[s.uuid]}),h=a.find({entities:["IFCWALLSTANDARDCASE","IFCWALL"]}),w=a.find({entities:["IFCDOOR","IFCWINDOW","IFCPLATE","IFCMEMBER"]}),V=new y({color:"gray",side:2}),J=new I({color:"black"}),K=new y({color:"black",opacity:.5,side:2,transparent:!0});r.styles.create("thick",new Set,e,J,V,K);for(const t in h){const o=b.list.get(t);if(!o)continue;const{mesh:p}=o;r.styles.list.thick.fragments[t]=new Set(h[t]),r.styles.list.thick.meshes.add(p)}r.styles.create("thin",new Set,e);for(const t in w){const o=b.list.get(t);if(!o)continue;const{mesh:p}=o;r.styles.list.thin.fragments[t]=new Set(w[t]),r.styles.list.thin.meshes.add(p)}await r.update(!0);W.init();const C=u.create(()=>f`
  <bim-panel active label="Plans Tutorial" class="options-menu">
      <bim-panel-section collapsed name="floorPlans" label="Plan list">
      </bim-panel-section>
    </bim-panel>
    `);document.body.append(C);const Q=e.renderer.postproduction.customEffects.minGloss,m=new L("white"),E=C.querySelector("bim-panel-section[name='floorPlans']");for(const t of i.list){const o=u.create(()=>f`
      <bim-button checked label="${t.name}"
        @click="${()=>{e.renderer.postproduction.customEffects.minGloss=.1,d.backupColor=m,a.setColor(k,m),e.scene.three.background=m,i.goTo(t.id),l.needsUpdate=!0}}">
      </bim-button>
    `);E.append(o)}const Y=e.scene.three.background,Z=u.create(()=>f`
      <bim-button checked label="Exit"
        @click="${()=>{d.backupColor=null,d.clear(),e.renderer.postproduction.customEffects.minGloss=Q,a.resetColor(k),e.scene.three.background=Y,i.exitPlanView(),l.needsUpdate=!0}}">
      </bim-button>
    `);E.append(Z);
