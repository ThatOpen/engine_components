var W=Object.defineProperty;var $=(n,r,t)=>r in n?W(n,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[r]=t;var h=(n,r,t)=>($(n,typeof r!="symbol"?r+"":r,t),t);import{Y as k,a as x}from"./index-D7EC26VF.js";import{a as P,R as F,m as M,F as U}from"./index-bERBRksd.js";import{d as H,E as Y,F as C,M as y,C as _,W as Q,S as V,a as z,O as J,H as B}from"./index-Bv9-N0Ab.js";import{I as v}from"./index-BBVfCO_1.js";const G=class G extends H{constructor(t){super(t);h(this,"enabled",!0);h(this,"onDisposed",new Y);h(this,"list",new k);h(this,"defaultSaveFunction",t=>"value"in t.Name?t.Name.value:null);h(this,"onBeforeFragmentsDispose",async t=>{const{key:s,value:e}=t,a=await e.getLocalIds(),o={[s]:new Set(a)};this.removeItems(o)});t.add(G.uuid,this),this.setupEvents(),t.get(C).list.onBeforeDelete.add(this.onBeforeFragmentsDispose)}setupEvents(){this.list.onBeforeDelete.add(({value:t})=>t.dispose())}getClassificationGroups(t){let s=this.list.get(t);return s||(s=new k,this.list.set(t,s)),s}getModelItems(t,s,e){const{map:a}=this.getGroupData(t,s);let o=a[e];return o||(o=new Set,a[e]=o),o}getGroupData(t,s){const e=this.components.get(v),a=this.getClassificationGroups(t);let o=a.get(s);return o||(o={map:{},get(){return new Promise(i=>{if(!o){i({});return}if(o.query){const{name:l,config:d}=o.query,m=e.list.get(l);if(!m)throw new Error("Classifier: the query name associated with the group doesn't exist in the ItemsFinder component");m.test(d).then(p=>{if(!o){i({});return}const f=y.join([p,o.map]);i(f)})}else i(o.map)})}},a.set(s,o)),o}async aggregateItems(t,s,e){const a=(e==null?void 0:e.data)??void 0,o=(e==null?void 0:e.aggregationCallback)??this.defaultSaveFunction,i=this.components.get(C),d=await this.components.get(v).getItems([s],{modelIds:e==null?void 0:e.modelIds});for(const[m,p]of Object.entries(d)){const f=i.list.get(m);if(!f)continue;const R=(S,...q)=>{const O=this.getModelItems(t,S,m);for(const j of q)O.add(j)},T=await f.getItemsData([...p],a);for(const S of T)o(S,R)}}addGroupItems(t,s,e){const{map:a}=this.getGroupData(t,s);y.add(a,e)}setGroupQuery(t,s,e){const a=this.getGroupData(t,s);a.query=e}async find(t){const s=[];for(const[a,o]of Object.entries(t)){const i=[],l=this.list.get(a);if(!l)continue;for(const m of o){const p=l.get(m);if(!p)continue;const f=await p.get();i.push(f)}const d=y.join(i);s.push(d)}return y.intersect(s)}async aggregateItemRelations(t,s,e,a){const o=(a==null?void 0:a.attribute)??"Name",i={relations:{[e]:{attributes:!0,relations:!1}}};await this.aggregateItems(t,s,{modelIds:a==null?void 0:a.modelIds,data:i,aggregationCallback:(l,d)=>{if(!(l!=null&&l[o]))return;const m=l[o];if(!("value"in m))return;const p=l[e];if(Array.isArray(p))for(const f of p)"value"in f._localId&&d(m.value,f._localId.value)}})}async byIfcBuildingStorey(t){await this.aggregateItemRelations((t==null?void 0:t.classificationName)??"Storeys",{categories:[/BUILDINGSTOREY/]},"ContainsElements",{modelIds:t==null?void 0:t.modelIds})}async byCategory(t){const e=await this.components.get(v).addFromCategories(t==null?void 0:t.modelIds);for(const a of e)this.setGroupQuery((t==null?void 0:t.classificationName)??"Categories",a,{name:a})}dispose(){this.list.clear(),this.components.get(C).list.onBeforeDelete.remove(this.onBeforeFragmentsDispose),this.onDisposed.trigger()}removeItems(t,s){if(s&&s.classificationName){const e=this.list.get(s.classificationName);if(!e||s.groupName&&!e.get(s.groupName))return;for(const[,a]of e)y.remove(a.map,t);return}for(const[,e]of this.list.entries())for(const[,a]of e)y.remove(a.map,t)}async byModel(t){const s=this.components.get(C),e=(t==null?void 0:t.classificationName)??"Models";for(const[a,o]of s.list){if(t&&t.modelIds&&!t.modelIds.some(d=>d.test(a)))continue;const i=await o.getItemsIdsWithGeometry(),l={[a]:new Set(i)};this.getGroupData(e,a),this.addGroupItems(e,a,l)}}};h(G,"uuid","e25a7f3c-46c4-4a14-9d3d-5115f24ebeb7");let N=G;const u=new _,K=u.get(Q),c=K.create();c.scene=new V(u);c.scene.setup();c.scene.three.background=null;const X=document.getElementById("container");c.renderer=new z(u,X);c.camera=new J(u);await c.camera.controls.setLookAt(78,20,-2.2,26,-4,25);u.init();const Z="https://thatopen.github.io/engine_fragment/resources/worker.mjs",g=u.get(C);g.init(Z);c.camera.controls.addEventListener("rest",()=>g.core.update(!0));c.onCameraChanged.add(n=>{for(const[,r]of g.list)r.useCamera(n.three);g.core.update(!0)});g.list.onItemSet.add(({value:n})=>{n.useCamera(c.camera.three),c.scene.three.add(n.object),g.core.update(!0)});const tt=["https://thatopen.github.io/engine_components/resources/frags/school_arq.frag","https://thatopen.github.io/engine_components/resources/frags/school_str.frag"];await Promise.all(tt.map(async n=>{var e;const r=(e=n.split("/").pop())==null?void 0:e.split(".").shift();if(!r)return null;const s=await(await fetch(n)).arrayBuffer();return g.core.load(s,{modelId:r})}));const b=u.get(N),A="Custom Classification",L="My Group";b.getGroupData("Custom Classification","My Group");const E={};for(const[n,r]of g.list){const t=await r.getItemsOfCategories([/SLAB/]),s=Object.values(t).flat().slice(0,2);E[n]=new Set(s)}b.addGroupItems(A,L,E);const et=u.get(v),st="First Floor Walls";et.create("First Floor Walls",[{categories:[/WALL/],relation:{name:"ContainedInStructure",query:{categories:[/STOREY/],attributes:{queries:[{name:/Name/,value:/01/}]}}}}]);b.setGroupQuery(A,L,{name:st});const at=async()=>{await b.byCategory(),await b.byIfcBuildingStorey({classificationName:"Levels"})};P.init();const ot=n=>M`
    <bim-table ${U(t=>{if(!t)return;const s=t;s.loadFunction=async()=>{const e=[];for(const[a,o]of b.list)for(const[i]of o)e.push({data:{Name:i,Classification:a,Actions:""}});return e},s.loadData(!0)})}></bim-table>
  `,[I,nt]=F.create(ot,{components:u});I.style.maxHeight="25rem";I.hiddenColumns=["Classification"];I.columns=["Name",{name:"Actions",width:"auto"}];I.noIndentation=!0;I.headersHidden=!0;I.dataTransform={Actions:(n,r)=>{const{Name:t,Classification:s}=r;if(!(t&&s))return n;const e=b.list.get(s);if(!e)return n;const a=e.get(t);if(!a)return n;const o=u.get(B);return M`<bim-button icon="solar:cursor-bold" @click=${async({target:l})=>{l.loading=!0;const d=await a.get();await o.isolate(d),l.loading=!1}}></bim-button>`}};b.list.onItemSet.add(()=>setTimeout(()=>nt()));const D=F.create(()=>M`
    <bim-panel active label="Classifier Tutorial" class="options-menu">
      <bim-panel-section style="min-width: 14rem" label="General">
        <bim-button label="Reset Visibility" @click=${async({target:t})=>{t.loading=!0,await u.get(B).set(!0),t.loading=!1}}></bim-button>
      </bim-panel-section>
      <bim-panel-section label="Groupings">
        <bim-button label="Add Defaults" @click=${async()=>{await at()}}></bim-button>
        ${I}
      </bim-panel-section>
    </bim-panel>
  `);document.body.append(D);const rt=F.create(()=>M`
      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"
        @click="${()=>{D.classList.contains("options-menu-visible")?D.classList.remove("options-menu-visible"):D.classList.add("options-menu-visible")}}">
      </bim-button>
    `);document.body.append(rt);const w=new x;w.showPanel(2);document.body.append(w.dom);w.dom.style.left="0px";w.dom.style.zIndex="unset";c.renderer.onBeforeUpdate.add(()=>w.begin());c.renderer.onAfterUpdate.add(()=>w.end());
