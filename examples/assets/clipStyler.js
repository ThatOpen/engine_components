var X=Object.defineProperty;var Z=(i,s,t)=>s in i?X(i,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[s]=t;var c=(i,s,t)=>(Z(i,typeof s!="symbol"?s+"":s,t),t);import{Y as E,G as ee,M as te,d as j,l as se,p as ne,q as oe,k as W,V as x,P as ie,T as re,L as B,m as b,H as Q,a as ae,r as le,C as P}from"./index-BR15nMAM.js";import{L as ce,a as de,b as V}from"./LineSegments2-7VC28rX3.js";import{E as q,F as G,D as H,f as Y,b as me,U as pe,g as z,C as ue,W as he,S as be,O as fe,I as we,R as ge,V as T}from"./graphic-vertex-picker-WQ6fDD2d.js";import{P as ye}from"./index-BYTOCRNk.js";class Ce{constructor(s,t){c(this,"_components");c(this,"_modelStyleGeometries",new E);c(this,"onDisposed",new q);c(this,"three",new ee);c(this,"plane");c(this,"items",new E);c(this,"world",null);c(this,"_visible",!1);this._components=s,this.plane=t,this.setupEvents()}set visible(s){s?this.world&&(this.world.scene.three.add(this.three),this._visible=!0):(this.three.removeFromParent(),this._visible=!1)}get visible(){return this._visible}setupEvents(){const s=this._components.get(M);this.items.guard=(t,{style:e})=>!!s.styles.get(e),this.items.onItemSet.add(({value:t})=>{const{style:e,data:n}=t;this.create(e,n)})}getStyleMeshes(s,t){const n=this._components.get(M).styles.get(t);if(!n)throw new Error(`ClipStyler: "${t}" style not found.`);const o=this._components.get(G).list.get(s);if(!o)throw new Error(`ClipEdges: model with id "${s}" not found.`);const{linesMaterial:a,fillsMaterial:u}=n;let d=this._modelStyleGeometries.get(s);d||(d=new E,this._modelStyleGeometries.set(s,d));let w=d.get(t);if(!w){let g;a&&(g=new ce(new de,a),g.frustumCulled=!1,o&&g.applyMatrix4(o.object.matrixWorld),this.three.add(g));let C;u&&(C=new te(new j,u),o&&C.applyMatrix4(o.object.matrixWorld),this.three.add(C)),w={edges:g,fills:C},d.set(t,w)}return w}async updateMeshes(s,t,e){const r=this._components.get(G).list.get(s);if(!r)return;const o=this._components.get(H),a=this.plane.clone();a.constant-=.01;const u=await r.getSection(a,e),{buffer:d,index:w,fillsIndices:g}=u,C=this.getStyleMeshes(s,t),{edges:N,fills:A}=C,I=new se(d,3,!1);if(N){I.setUsage(ne);const O=new j;O.setAttribute("position",I),O.setDrawRange(0,w);const R=new oe(O);N.geometry.fromLineSegments(R),o.destroy(R)}A&&(A.geometry.attributes.position=I,A.geometry.setIndex(g))}async create(s,t){if(!this._components.get(M).styles.get(s))throw new Error(`ClipEdges: "${s}" style not found.`);const r=this._components.get(Y);let o=null;t&&(o=await r.find(t));const a=this._components.get(G);if(o)for(const[u,d]of Object.entries(o))a.list.get(u)&&this.updateMeshes(u,s,[...d]);else for(const[u]of a.list)this.updateMeshes(u,s)}async update(s){for(const[t,{data:e,style:n}]of this.items)s&&!s.includes(t)||this.create(n,e)}dispose(){this._components.get(H).destroy(this.three,!0,!0),this._modelStyleGeometries.clear()}}const D=class D extends me{constructor(t){super(t);c(this,"onDisposed",new q);c(this,"enabled",!0);c(this,"world",null);c(this,"styles",new E);c(this,"list",new E);c(this,"_visible",!0);this.components.list.set(D.uuid,this),this.setEvents()}get visible(){return this._visible}set visible(t){this._visible=t;for(const[,e]of this.list)e.visible=t}setEvents(){this.list.onBeforeDelete.add(({value:t})=>t.dispose())}setEdgesConfig(t,e){if(t.world=(e==null?void 0:e.world)??this.world,e!=null&&e.items)for(const[r,o]of Object.entries(e.items))t.items.set(r,o);const n=(e==null?void 0:e.id)??pe.create();this.list.set(n,t)}create(t,e){const n=new Ce(this.components,t);return e&&this.setEdgesConfig(n,e),n}createFromView(t,e){const n=this.create(t.plane,e);return((e==null?void 0:e.link)!==void 0?e.link:!0)&&(t.onDisposed.add(()=>n.dispose()),t.onUpdated.add(()=>n.update()),t.onStateChanged.add(()=>n.visible=t.open)),n}createFromClipping(t,e){const r=this.components.get(z).list.get(t);if(!r)throw new Error(`ClipStyler: Clipping plane with ID ${t} not found.`);const o=this.create(r.three,e);return o.visible=!0,((e==null?void 0:e.link)!==void 0?e.link:!0)&&(r.onDraggingEnded.add(()=>o.update()),r.onDisposed.add(()=>o.dispose())),o}dispose(){this.styles.clear(),this.list.clear(),this.onDisposed.trigger(D.uuid)}};c(D,"uuid","24dfc306-a3c4-410f-8071-babc4afa5e4d");let M=D;const m=new ue,Se=m.get(he),l=Se.create();l.scene=new be(m);l.scene.setup();l.scene.three.background=null;const J=document.getElementById("container");l.renderer=new ye(m,J);l.camera=new fe(m);await l.camera.controls.setLookAt(68,23,-8.5,21.5,-5.5,23);m.init();const Me="/node_modules/@thatopen/fragments/dist/Worker/worker.mjs",y=m.get(G);y.init(Me);l.camera.controls.addEventListener("rest",()=>y.core.update(!0));l.onCameraChanged.add(i=>{var s;for(const[,t]of y.list)t.useCamera(i.three);y.core.update(!0),(s=l.renderer)==null||s.postproduction.updateCamera()});y.list.onItemSet.add(({value:i})=>{i.useCamera(l.camera.three),l.scene.three.add(i.object),y.core.update(!0)});const ke=["/resources/frags/school_arq.frag"];await Promise.all(ke.map(async i=>{var n;const s=(n=i.split("/").pop())==null?void 0:n.split(".").shift();if(!s)return null;const e=await(await fetch(i)).arrayBuffer();return y.core.load(e,{modelId:s})}));const p=m.get(M);p.world=l;p.styles.set("Blue",{linesMaterial:new V({color:"black",linewidth:2}),fillsMaterial:new W({color:"lightblue",side:2})});p.styles.set("Red",{linesMaterial:new V({color:"black",linewidth:3}),fillsMaterial:new W({color:"salmon",side:2})});p.styles.set("Green",{linesMaterial:new V({color:"black",linewidth:2}),fillsMaterial:new W({color:"lightgreen",side:2})});p.styles.set("Black",{linesMaterial:new V({color:"black",linewidth:2}),fillsMaterial:new W({color:"black",side:2})});p.styles.set("BlackFill",{fillsMaterial:new W({color:"black",side:2})});const k=m.get(we);k.create("Walls",[{categories:[/WALL/]}]);k.create("Slabs",[{categories:[/SLAB/]}]);k.create("Columns",[{categories:[/COLUMN/]}]);k.create("Doors",[{categories:[/DOOR/]}]);k.create("Curtains",[{categories:[/PLATE/,/MEMBER/]}]);k.create("Windows",[{categories:[/WINDOW/]}]);const v=m.get(Y),h="ClipperGroups";v.setGroupQuery(h,"Walls",{name:"Walls"});v.setGroupQuery(h,"Slabs",{name:"Slabs"});v.setGroupQuery(h,"Columns",{name:"Columns"});v.setGroupQuery(h,"Doors",{name:"Doors"});v.setGroupQuery(h,"Curtains",{name:"Curtains"});v.setGroupQuery(h,"Windows",{name:"Windows"});const ve=m.get(ge);ve.get(l);const f=m.get(z);f.enabled=!0;J.ondblclick=()=>{f.enabled&&f.create(l)};window.onkeydown=i=>{(i.code==="Delete"||i.code==="Backspace")&&f.enabled&&f.delete(l)};f.list.onItemSet.add(({key:i})=>{p.createFromClipping(i,{items:{All:{style:"BlackFill"}}})});f.createFromNormalAndCoplanarPoint(l,new x(0,-1,0),new x(0,3,0));const S=m.get(T),F=S.createFromPlane(new ie(new x(-1,0,0),35),{id:"Section",world:l});F.range=5;F.helpersVisible=!0;p.createFromView(F,{items:{ArchElements:{style:"Blue",data:{[h]:["Walls","Slabs","Curtains","Windows"]}}}});const[U]=await S.createFromIfcStoreys({storeyNames:[/03/],world:l,offset:1});U.helpersVisible=!0;const Le=p.createFromView(U,{items:{Walls:{style:"Blue",data:{[h]:["Walls"]}},Columns:{style:"Red",data:{[h]:["Columns"]}},Doors:{style:"Green",data:{[h]:["Doors"]}}}});Le.items.set("Curtains & Windows",{style:"Black",data:{[h]:["Curtains","Windows"]}});const K=()=>{for(const[,i]of f.list)i.enabled=!S.hasOpenViews,i.visible=!S.hasOpenViews;for(const[,i]of S.list)i.helpersVisible=!S.hasOpenViews};U.onStateChanged.add(K);F.onStateChanged.add(K);re.init();const Ee=i=>{const{components:s}=i,t=s.get(T);return b`<bim-table ${Q(n=>{if(!n)return;const r=n;r.data=[...t.list.keys()].map(o=>({data:{Name:o,Actions:""}}))})}></bim-table>`},[_]=B.create(Ee,{components:m});_.headersHidden=!0;_.noIndentation=!0;_.columns=["Name",{name:"Actions",width:"auto"}];_.dataTransform={Actions:(i,s)=>{const{Name:t}=s;if(!t)return i;const e=m.get(T);return e.list.get(t)?b`
      <bim-button label-hidden icon="solar:cursor-bold" label="Open" @click=${()=>{e.open(t)}}></bim-button>
      <bim-button label-hidden icon="material-symbols:close" label="Close" @click=${()=>{e.close(t)}}></bim-button>
    `:i}};const De=B.create(()=>b`<bim-table no-indentation ${Q(s=>{if(!(s instanceof le))return;const t=s;t.dataTransform={LineWidth:(e,n)=>{const r=n.Name,o=p.styles.get(r);if(!o)return e;const{linesMaterial:a}=o;return a?b`
          <bim-number-input .value=${e} min=0.5 max=10 slider step=0.05 @change=${({target:d})=>{a.linewidth=d.value}}></bim-number-input>
        `:e},LineColor:(e,n)=>{const r=n.Name,o=p.styles.get(r);if(!o)return e;const{linesMaterial:a}=o;return a?b`
          <bim-color-input .color=${e} @input=${({target:d})=>{a.color=new P(d.color)}}></bim-color-input>
        `:e},FillColor:(e,n)=>{const r=n.Name,o=p.styles.get(r);if(!o)return e;const{fillsMaterial:a}=o;return a?b`
          <bim-color-input .color=${e} @input=${({target:d})=>{"color"in a&&a.color instanceof P&&(a.color=new P(d.color))}}></bim-color-input>
        `:e}},t.data=Array.from(p.styles.entries()).map(([e,n])=>{const r=n.linesMaterial,o=n.fillsMaterial,a={data:{Name:e}};return r&&(a.data.LineWidth=r.linewidth,a.data.LineColor=`#${r.color.getHexString()}`),o&&(a.data.FillColor=`#${o.color.getHexString()}`),a})})}></bim-table>`),$=B.create(()=>b`
    <bim-panel active label="Clip Styler Tutorial" class="options-menu">
      <bim-panel-section label="Styles">
        <bim-label style="white-space: normal;">Here you can manage the clipping styles of your app. Try to change some of these while a view is open to see the effect.</bim-label>
        ${De}
      </bim-panel-section>
      <bim-panel-section label="Views">
        <bim-label style="white-space: normal;">These are the views created in the project. They are linked to the clipping styles.</bim-label>
        ${_}
      </bim-panel-section>
    </bim-panel>
  `);document.body.append($);const We=B.create(()=>b`
      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"
        @click="${()=>{$.classList.contains("options-menu-visible")?$.classList.remove("options-menu-visible"):$.classList.add("options-menu-visible")}}">
      </bim-button>
    `);document.body.append(We);const L=new ae;L.showPanel(2);document.body.append(L.dom);L.dom.style.left="0px";L.dom.style.zIndex="unset";l.renderer.onBeforeUpdate.add(()=>L.begin());l.renderer.onAfterUpdate.add(()=>L.end());
