var k=Object.defineProperty;var I=(r,t,e)=>t in r?k(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var n=(r,t,e)=>(I(r,typeof t!="symbol"?t+"":t,e),e);import{U as x,a as m,D as M,b as f,E as c,B as E,M as U,c as F,G as A}from"./graphic-vertex-picker-CqNhsDsK.js";import{L as R,M as V,G as C,W as d,V as a,B as N,P as B,b as $,c as L,d as G,e as D,f as O,g as Y,C as p,h as _,D as w,F as W,z as y,i as H}from"./index-lvtjgYNN.js";import{M as P}from"./index-B41enjmT.js";function T(){const r=document.createElement("div");return r.style.backgroundColor="blue",r.style.color="white",r.style.padding="6px",r.style.borderRadius="6px",r.style.boxShadow="0px 4px 6px rgba(0, 0, 0, 0.6)",r.style.zIndex="-10",r}function X(r={}){const{color:t="white",size:e="4px",border:s="2px solid blue",background:i="white"}=r,o=document.createElement("div");return o.style.backgroundColor=i,o.style.color=t,o.style.height=e,o.style.width=e,o.style.borderRadius="50%",o.style.border=s,o.style.zIndex="-20",o}class u extends R{constructor(){super(...arguments);n(this,"id",x.create());n(this,"_units","m");n(this,"_rounding",2)}set units(e){this._units=e}get units(){return this._units}set rounding(e){this._rounding=e}get rounding(){return this._rounding}get value(){const e=this.distance();return m.convertUnits(e,"m",this.units,this.rounding)}}class b{constructor(t,e,s,i=2,o="m"){n(this,"label");n(this,"boundingBox",new V);n(this,"world");n(this,"_components");n(this,"_units","m");n(this,"_rounding",2);n(this,"startNormal",null);n(this,"line");n(this,"rectangleComponentLines",[]);n(this,"projectionComponentLines",[]);n(this,"_visible",!0);n(this,"_root",new C);n(this,"_endpoints",new d);n(this,"lineElement");n(this,"rectangleDimensions",new d);n(this,"projectionDimensions",new d);n(this,"isSelected",!1);n(this,"_latestRectangularInversion",!1);n(this,"_endpointElement",X());n(this,"_material");n(this,"_componentsMaterial",new $({depthTest:!1,gapSize:.2,dashSize:.2,transparent:!0,opacity:.5,color:3026478}));this._components=t,this.world=e,this._material=s.lineMaterial,this._rounding=i,this._units=o,this.line=s.line,this.startNormal=s.startNormal??null,this.rectangleComponentLines=[new u,new u],this.updateRectangleComponents(),this.updateProjectionComponents(),this.lineElement=this.createLine(s),this._endpoints.onItemAdded.add(l=>{this._root.add(l.three);const h=this._endpoints.size===1?this.line.start:this.line.end;l.three.position.copy(h)}),this._endpoints.onBeforeDelete.add(l=>l.dispose()),this.createEndpoints();for(const l of this._endpoints)l.three.element.style.borderColor=`#${s.lineMaterial.color.getHexString()}`;this.label=this.newText(),this.label.three.element.style.backgroundColor=`#${s.lineMaterial.color.getHexString()}`,this.label.three.renderOrder=1,this._root.renderOrder=2,this.world.scene.three.add(this._root),this.setupEvents()}set units(t){for(const e of this.rectangleDimensions)e.units=t;for(const e of this.projectionDimensions)e.units=t;this._units=t,this.updateLabel()}get units(){return this._units}set rounding(t){for(const e of this.rectangleDimensions)e.rounding=t;for(const e of this.projectionDimensions)e.rounding=t;this._rounding=t,this.updateLabel()}get rounding(){return this._rounding}get visible(){return this._visible}set visible(t){for(const h of this.rectangleDimensions)h.visible=t;for(const h of this.projectionDimensions)h.visible=t;this._visible=t,this.label.visible=t;for(const h of this._endpoints)h.visible=t;const[e,s]=this._endpoints,i=e.three,o=s.three,l=this.label.three;t?(this.world.scene.three.add(this._root),this._root.add(l,i,o)):(l.removeFromParent(),i.removeFromParent(),o.removeFromParent(),this._root.removeFromParent())}set end(t){this.line.end=t;const e=this.lineElement.geometry.attributes.position;e.setXYZ(1,t.x,t.y,t.z),e.needsUpdate=!0,this.update()}set start(t){this.line.start=t;const e=this.lineElement.geometry.attributes.position;e.setXYZ(0,t.x,t.y,t.z),e.needsUpdate=!0,this.update()}setupEvents(){this.rectangleDimensions.onBeforeDelete.add(t=>t.dispose()),this.projectionDimensions.onBeforeDelete.add(t=>t.dispose())}dispose(){this.visible=!1;const t=this._components.get(M);t.destroy(this._root),t.destroy(this.lineElement),this._endpoints.clear(),this.label.dispose(),this.boundingBox&&t.destroy(this.boundingBox),this.rectangleDimensions.clear(),this.projectionDimensions.clear(),this._components=null}createBoundingBox(){const t=new a;this.line.getCenter(t);const e=this.line.distance();this.boundingBox.geometry=new N(1,1,e),this.boundingBox.position.copy(t),this.boundingBox.lookAt(this.line.end),this.boundingBox.visible=!1,this._root.add(this.boundingBox)}invertRectangularDimensions(){this.rectangleDimensions.size!==0&&(this.rectangleDimensions.clear(),this._latestRectangularInversion=!this._latestRectangularInversion,this.updateRectangleComponents(this._latestRectangularInversion),this.displayRectangularDimensions())}displayRectangularDimensions(){this.rectangleDimensions.clear();for(const t of this.rectangleComponentLines){const e=new b(this._components,this.world,{line:t,lineMaterial:this._componentsMaterial,endpointElement:this.endpointElement});e.lineElement.computeLineDistances(),this.rectangleDimensions.add(e)}}displayProjectionDimensions(){this.projectionDimensions.clear();for(const t of this.projectionComponentLines){const e=new b(this._components,this.world,{line:t,lineMaterial:this._componentsMaterial,endpointElement:this.endpointElement});e.lineElement.computeLineDistances(),this.projectionDimensions.add(e)}}set endpointElement(t){for(const e of this.rectangleDimensions)e.endpointElement=t;for(const e of this.projectionDimensions)e.endpointElement=t;this._endpointElement=t,this.createEndpoints()}get endpointElement(){return this._endpointElement}createEndpoints(){this._endpoints.clear();const t=new f(this.world,this._endpointElement),e=new f(this.world,this._endpointElement.cloneNode(!0));this._endpoints.add(t,e)}updateProjectionComponents(){if(!this.startNormal)return;const t=new B().setFromNormalAndCoplanarPoint(this.startNormal,this.line.start),e=new a;t.projectPoint(this.line.end,e);let[s]=this.projectionComponentLines;s||(s=new u,this.projectionComponentLines.push(s)),s.set(this.line.end,e),s.distance()<.01&&this.projectionComponentLines.shift();for(const i of this.projectionDimensions)i&&i.update()}updateRectangleComponents(t=!1){const e=t?this.line.end:this.line.start,s=t?this.line.start:this.line.end,i=new a;i.subVectors(s,e),Math.abs(s.y-e.y)>=.1?i.y=0:i.x=0;const l=e.clone().add(i),[h,j]=this.rectangleComponentLines;h.set(l,e),j.set(l,s);for(const z of this.rectangleDimensions)z.update()}updateLabel(){this.label.three.element.textContent=this.getTextContent();const t=new a;this.line.getCenter(t),this.label.three.position.copy(t)}updateGeometry(){this.updateRectangleComponents(),this.updateProjectionComponents(),[...this._endpoints][0].three.position.copy(this.line.start),[...this._endpoints][1].three.position.copy(this.line.end),this.lineElement.geometry.computeBoundingSphere()}update(){this.updateGeometry(),this.updateLabel()}set material(t){this._material.dispose(),this._material=t,this.lineElement.material=t}get material(){return this._material}createLine(t){const e=new L;e.setFromPoints([t.line.start,t.line.end]);const s=new G(e,t.lineMaterial);return this._root.add(s),s}newText(){const t=T();t.textContent=this.getTextContent();const e=new f(this.world,t),s=new a;return this.line.getCenter(s),e.three.position.copy(s),this._root.add(e.three),e}getTextContent(t=this.line.distance()){return`${m.convertUnits(t,"m",this._units,this.rounding)} ${this._units}`}set color(t){const e=`#${t.getHexString()}`;this.label.three.element.style.backgroundColor=e;for(const s of this._endpoints)s.three.element.style.borderColor=e;this._material.color.set(t)}}class g{constructor(t){n(this,"id",x.create());n(this,"points",new d);n(this,"tolerance",.005);n(this,"_plane",null);n(this,"_rounding",2);n(this,"_units","m2");this.points.guard=e=>{const s=[...this.points].some(o=>o.equals(e)),i=this.isPointInPlane(e);return!s&&i},this.points.onItemAdded.add(e=>{if(this.plane){const s=new a;this.plane.projectPoint(e,s),e.copy(s)}this.points.size<3||this.points.size===3&&this.computePlane()}),this.points.onItemDeleted.add(()=>{this.points.size>=3||(this._plane=null)}),this.points.onCleared.add(()=>{this._plane=null}),t&&this.points.add(...t)}get plane(){return this._plane}get _coordinateSystem(){if(!this.plane)return null;const t=this.plane.normal,e=new a,s=new a;return Math.abs(t.x)>Math.abs(t.z)?e.set(-t.y,t.x,0).normalize():e.set(0,-t.z,t.y).normalize(),s.crossVectors(t,e).normalize(),{normal:t.clone(),x:e.clone(),y:s.clone()}}get points2D(){if(!this.plane)if(this.points.size>=3)this.computePlane();else return null;return[...this.points].map(e=>this.convertPointTo2D(e)).filter(e=>e!==null)}get center(){if(!this.plane||this.points.size<3)return null;const t=this.points2D;if(!t||t.length===0)return null;const e=t.reduce((s,i)=>s.add(i),new D).divideScalar(t.length);return this.convertPointTo3D(e)}get value(){const t=this.points2D;if(!t)return 0;const e=Math.abs(O.area(t));return m.convertUnits(e,"m2",this.units,this.rounding)}get boundingBox(){if(this.points.size===0)return null;const t=new Y;for(const e of this.points)t.expandByPoint(e);return t}get perimeter(){const t=this.points2D;if(!t||t.length<2)return 0;let e=0;for(let s=0;s<t.length;s++){const i=t[s],o=t[(s+1)%t.length];e+=i.distanceTo(o)}return e}set rounding(t){this._rounding=t}get rounding(){return this._rounding}set units(t){this._units=t}get units(){return this._units}isPointInPlane(t){if(!this.plane)return!0;const e=this.plane.distanceToPoint(t);return Math.abs(e)<this.tolerance}clone(){return new g([...this.points])}computePlane(){const[t,e,s]=this.points;if(!(t&&e&&s))return null;const i=new a().subVectors(e,t),o=new a().subVectors(s,t),l=new a().crossVectors(i,o).normalize();return this._plane=new B().setFromNormalAndCoplanarPoint(l,t),this.plane}convertPointTo2D(t){if(!this.isPointInPlane(t)||!this.plane)return null;const e=this._coordinateSystem;if(!e)return null;const s=new a;this.plane.projectPoint(t,s);const i=s.dot(e.x),o=s.dot(e.y);return new D(i,o)}convertPointTo3D(t){if(!this.plane)return null;const e=this._coordinateSystem;if(!e)return null;const{x:s,y:i,normal:o}=e;return new a().addScaledVector(s,t.x).addScaledVector(i,t.y).addScaledVector(o,-this.plane.constant)}}class v{constructor(t){n(this,"_components");n(this,"id",x.create());n(this,"onItemsChanged",new c);n(this,"_items",{});n(this,"_units","m3");n(this,"_rounding",2);this._components=t}set items(t){this._items=t,this.onItemsChanged.trigger()}get items(){return this._items}set units(t){this._units=t}get units(){return this._units}set rounding(t){this._rounding=t}get rounding(){return this._rounding}async getValue(){const e=await this._components.get(m).getItemsVolume(this.items);return m.convertUnits(e,"m3",this.units,this.rounding)}async getCenter(){return await this._components.get(E).getCenter(this.items)}async getBox(){const t=this._components.get(E);t.list.clear(),await t.addFromModelIdMap(this.items);const e=t.get();return t.list.clear(),e}clone(){const t=new v(this._components);return t.items=U.clone(this.items),t}}class S extends f{constructor(e){const s=document.createElement("div");s.style.backgroundColor="blue",s.style.color="white",s.style.padding="6px",s.style.borderRadius="6px",s.style.boxShadow="0px 4px 6px rgba(0, 0, 0, 0.6)",s.style.zIndex="-10";super(e,s);n(this,"_value",0);n(this,"_units","m2");n(this,"_worldUnits","m2");n(this,"_color",new p);n(this,"_textColor",new p);n(this,"_rounding",2);this.three.renderOrder=1,s.textContent=this.formattedValue}set value(e){this._value=e,this.three.element.textContent=this.formattedValue}get value(){return this._value}set units(e){this._units=e,this.three.element.textContent=this.formattedValue}get units(){return this._units}set worldUnits(e){this._worldUnits=e,this.three.element.textContent=this.formattedValue}get worldUnits(){return this._worldUnits}set color(e){this._color=e;const s=`#${e.getHexString()}`;this.three.element.style.backgroundColor=s}get color(){return this._color}set textColor(e){this._textColor=e;const s=`#${e.getHexString()}`;this.three.element.style.color=s}get textColor(){return this._textColor}set rounding(e){this._rounding=e,this.three.element.textContent=this.formattedValue}get rounding(){return this._rounding}get formattedValue(){return`${m.convertUnits(this.value,this.worldUnits,this.units,this.rounding)} ${this.units}`}}class K{constructor(t,e,s=new g){n(this,"_root",new C);n(this,"_components");n(this,"_material",new _({color:"red",transparent:!0,opacity:.5,side:w,depthTest:!1}));n(this,"_visible",!0);n(this,"_color",new p);n(this,"label");n(this,"three",new V);n(this,"world");n(this,"area");n(this,"_triggerUpdate",()=>this.update());this._components=t,this.world=e,this.area=s,this.world.scene.three.add(this.three),this.label=new S(e),this._root.renderOrder=2,this.visible=!0,this.update(),s.points.onItemAdded.add(this._triggerUpdate),s.points.onItemDeleted.add(this._triggerUpdate),s.points.onCleared.add(this._triggerUpdate)}set material(t){this._material.dispose(),this._material=t,this.three.material=t}get material(){return this._material}set visible(t){this._visible=t,this.label.visible=t;const e=this.label.three;t?(this._root.add(e,this.three),this.world.scene.three.add(this._root)):(e.removeFromParent(),this._root.removeFromParent())}get visible(){return this._visible}set rounding(t){this.label.rounding=t}get rounding(){return this.label.rounding}set units(t){this.label.units=t}get units(){return this.label.units}set color(t){this._color=t,this.label.color=t,this._material.color.set(t)}get color(){return this._color}updateMesh(){if(this.area.points.size<3)return;const t=[...this.area.points],e=t.flatMap(o=>[o.x,o.y,o.z]),s=[];for(let o=1;o<t.length-1;o++)s.push(0,o,o+1);this.three.geometry.dispose();const i=new L;i.setAttribute("position",new W(e,3)),i.setIndex(s),this.three.geometry=i,this.three.material=this.material}update(){if(this.updateMesh(),this.area.value===0)this.label.visible=!1;else{this.label.value=this.area.value,this.label.visible=!0;const t=this.area.center;t&&this.label.three.position.copy(t)}}dispose(){this.label.dispose(),this._components.get(M).destroy(this._root,!0,!0),this.area.points.clear()}}const Z={length:"m",area:"m2",volume:"m3"};class q{constructor(t,e,s=new v(t)){n(this,"_root",new C);n(this,"_components");n(this,"_material",new _({color:"red",transparent:!0,opacity:.75,side:w,depthTest:!1}));n(this,"_visible",!0);n(this,"_color",new p);n(this,"label");n(this,"world");n(this,"volume");n(this,"meshes",[]);this._components=t,this.world=e,this.volume=s,this.label=new S(e),this._root.renderOrder=2,this.visible=!0,this.update(),this.volume.onItemsChanged.add(()=>this.update())}set material(t){this._material.dispose(),this._material=t;for(const e of this.meshes)e.material=t}get material(){return this._material}set visible(t){this._visible=t,this.label.visible=t;for(const e of this.meshes)t?this.world.scene.three.add(e):e.removeFromParent()}get visible(){return this._visible}set rounding(t){this.label.rounding=t}get rounding(){return this.label.rounding}set units(t){this.label.units=t}get units(){return this.label.units}set color(t){this._color=t,this.label.color=t,this._material.color.set(t)}get color(){return this._color}async updateMesh(){this.cleanMeshes();const t=this._components.get(P),e=await t.get(this.volume.items,{material:this.material});this.meshes=t.getMeshesFromResult(e);for(const s of this.meshes)this.world.scene.three.add(s)}async update(){this.updateMesh();const t=await this.volume.getValue();this.label.visible=t!==0,this.label.value=t;const e=await this.volume.getCenter();e&&this.label.three.position.copy(e)}cleanMeshes(){const t=this._components.get(M);for(const s of this.meshes)t.destroy(s,!0,!0);this._components.get(P).remove(),this.meshes=[]}dispose(){this.label.dispose(),this.cleanMeshes(),this.volume.items={}}}class se extends F{constructor(e,s){super(e);n(this,"list",new d);n(this,"onDisposed",new c);n(this,"snappings",[y.LINE,y.POINT,y.FACE]);n(this,"lines",new d);n(this,"fills",new d);n(this,"labels",new d);n(this,"volumes",new d);n(this,"_world",null);n(this,"measureType");n(this,"onPointerStop",new c);n(this,"onPointerMove",new c);n(this,"onStateChanged",new c);n(this,"pointerStopTimeout",null);n(this,"onMove",()=>{this.enabled&&(this.pointerStopTimeout!==null&&clearTimeout(this.pointerStopTimeout),this.pointerStopTimeout=window.setTimeout(()=>{this.onPointerStop.trigger()},50),this.onPointerMove.trigger())});n(this,"onKeydown",e=>{this.enabled&&e.key==="Escape"&&this.cancelCreation()});n(this,"onEnabledChange",new c);n(this,"_enabled",!1);n(this,"onVisibilityChange",new c);n(this,"_visible",!0);n(this,"_units");n(this,"_rounding",2);n(this,"_linesEndpointElement",T());n(this,"_linesMaterial",new H({color:"#0000FF",depthTest:!1}));n(this,"_fillsMaterial",new _({color:2392594,side:w,transparent:!0,opacity:.3,depthTest:!1}));n(this,"_volumesMaterial",new _({color:2392594,side:w,transparent:!0,opacity:.3,depthTest:!1}));n(this,"_color",new p);n(this,"_vertexPicker",new A(this.components));n(this,"create",e=>{});n(this,"endCreation",e=>{});n(this,"cancelCreation",()=>{});n(this,"delete",e=>{});this.measureType=s,this._units=Z[this.measureType],this.lines.onBeforeDelete.add(i=>i.dispose()),this.fills.onBeforeDelete.add(i=>i.dispose()),this.labels.onBeforeDelete.add(i=>i.dispose()),this.volumes.onBeforeDelete.add(i=>i.dispose()),this.list.onCleared.add(()=>{this.lines.clear(),this.fills.clear(),this.labels.clear(),this.volumes.clear()})}set world(e){this._world=e,this._vertexPicker.world=e}get world(){return this._world}get unitsList(){let e=[];return this.measureType==="length"?e=["mm","cm","m","km"]:this.measureType==="area"?e=["mm2","cm2","m2","km2"]:e=["mm3","cm3","m3","km3"],e}setEvents(e){if(!this.world)throw new Error("Measurement: you must specify a world first!");if(this.world.isDisposing)return;if(!this.world.renderer)throw new Error("Measurement: the world needs a renderer!");const i=this.world.renderer.three.domElement.parentElement;i&&(i.removeEventListener("pointermove",this.onMove),window.removeEventListener("keydown",this.onKeydown),e&&(i.addEventListener("pointermove",this.onMove),window.addEventListener("keydown",this.onKeydown)))}set enabled(e){this._enabled=e,this._vertexPicker.enabled=e,this.setEvents(e),this.cancelCreation(),this.onEnabledChange.trigger(e),this.onStateChanged.trigger(["enabled"])}get enabled(){return this._enabled}set visible(e){this._visible=e;for(const s of this.lines)s.visible=e;for(const s of this.fills)s.visible=e;for(const s of this.volumes)s.visible=e;this.onVisibilityChange.trigger(e),this.onStateChanged.trigger(["visibility"])}get visible(){return this._visible}set units(e){this._units=e;let s;e.endsWith("2")?s="area":e.endsWith("3")?s="volume":s="length";for(const i of this.list)(i instanceof u||i instanceof g||i instanceof v)&&(i.units=e);if(s==="length")for(const i of this.lines)i.units=e;else if(s==="area")for(const i of this.fills)i.units=e;else if(s==="volume")for(const i of this.volumes)i.units=e;this.onStateChanged.trigger(["units"])}get units(){return this._units}set rounding(e){this._rounding=e;for(const s of this.list)(s instanceof u||s instanceof g)&&(s.rounding=e);for(const s of this.lines)s.rounding=e;for(const s of this.fills)s.rounding=e;for(const s of this.volumes)s.rounding=e;this.onStateChanged.trigger(["rounding"])}get rounding(){return this._rounding}set linesEndpointElement(e){this._linesEndpointElement=e;for(const s of this.lines)s.endpointElement=e}get linesEndpointElement(){return this._linesEndpointElement}set linesMaterial(e){this._linesMaterial.dispose(),this._linesMaterial=e;for(const s of this.lines)s.material=e}get linesMaterial(){return this._linesMaterial}set fillsMaterial(e){this._fillsMaterial.dispose(),this._fillsMaterial=e;for(const s of this.fills)s.material=e}get fillsMaterial(){return this._fillsMaterial}set volumesMaterial(e){this._volumesMaterial.dispose(),this._volumesMaterial=e;for(const s of this.volumes)s.material=e}get volumesMaterial(){return this._volumesMaterial}set color(e){this._color=e,this._linesMaterial.color.set(e),this._fillsMaterial.color.set(e),this._volumesMaterial.color.set(e);for(const s of this.lines)s.color=e;for(const s of this.fills)s.color=e;for(const s of this.volumes)s.color=e;this.onStateChanged.trigger(["color"])}get color(){return this._color}dispose(){this._vertexPicker.dispose(),this.list.clear(),this.linesMaterial.dispose(),this.fillsMaterial.dispose(),this.volumesMaterial.dispose(),this.onDisposed.trigger()}createLineElement(e,s=null){if(!this.world)throw new Error("Measurement: world is need!");return new b(this.components,this.world,{line:e,startNormal:s??void 0,lineMaterial:this.linesMaterial,endpointElement:this.linesEndpointElement},this.rounding,this.units)}createFillElement(e){if(!this.world)throw new Error("Measurement: world is need!");const s=new K(this.components,this.world,e);return s.rounding=this.rounding,(this.units.endsWith("2")?"area":void 0)==="area"&&(s.units=this.units),s}createVolumeElement(e){if(!this.world)throw new Error("Measurement: world is need!");const s=new q(this.components,this.world,e);return s.rounding=this.rounding,(this.units.endsWith("3")?"volume":void 0)==="volume"&&(s.units=this.units),s}addLineElementsFromPoints(e){for(let s=0;s<e.length;s++){const i=e[s],o=e[(s+1)%e.length],l=new u(i,o),h=this.createLineElement(l);h.label.visible=!1,this.lines.add(h)}}getLineBoxes(){const e=[];for(const s of this.lines)e.push(s.boundingBox);return e}getFillBoxes(){const e=[];for(const s of this.fills)e.push(s.three);return e}async getVolumeBoxes(){const e=[];for(const s of this.volumes)e.push(s.meshes);return e}}export{g as A,u as L,se as M,q as a};
